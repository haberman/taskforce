
package taskforce;

message Task {
  // Human-readable label for this task, must be unique within a TaskForce.
  optional string label = 1;

  // Dependencies of this task.
  //
  // These are file paths relative to the base of the tree, and they may not
  // contain "./" or "../".  However, they may start with "/".
  repeated string input = 2;

  // File that contains dynamically-computed dependencies of this task.
  // This task will depend on these files, but the file itself can also
  // contain dynamically-computed dependencies of this task.
  optional string dynamic_input_file = 3;

  // Outputs of this task.
  //
  // These are file paths relative to the base of the tree, and they may not
  // contain "./" or "../", and may not start with "/" (all targets must be
  // within the tree).
  repeated string output = 4;

  // The command to be run and all arguments.  These will be passed directly to
  // exec() and will not be interpreted by any shell.
  //
  // The current directory will be the base of the tree.
  repeated string arg = 5;

  // Environment variables in VAR=val format.  The environment will be
  // completely cleared except for the variables listed here.
  repeated string env = 6;

  // The file where stdout will be written.  This is only required if you want
  // to refer to this file's stdout from another task.  May not be absolute.
  optional string stdout_file = 7;

  // If true, the stdout should be a DependencyMap and other tasks can use
  // this for their dynamically-generated dependencies.  Requires that
  // stdout_file is set.
  optional bool calculates_dependencies = 8;
}

message TaskForceProto {
  // The tasks that are part of this TaskForce.
  repeated Task task = 1;
}

message Job {
  // Unique id for this job.  Hash of input.
  optional string id = 1;

  enum State {
    RUNNABLE = 0;
    RUNNING = 1;
    SUCCESS = 2;
    ERROR = 3;
  }

  optional State state = 2;

  message Input {
    // Task for this job.
    optional string task_id = 1;

    // Files that were computed as dependencies of this job dynamically
    // (ie as a function of the input file's content).
    repeated string dynamic_inputs = 2;

    // Ids of sources, array elements correspond to task.input followed
    // by dynamic_inputs.
    repeated string input_fingerprint = 3;
  }

  // Identifies the input associated with this job.
  optional Input input = 3;

  message Output {
    // Ids of targets, array elements correspond to task.target.
    repeated string output_fingerprint = 1;

    // Present iff this task has calculates_dependencies=true.
    optional DependencyMap dynamic_dependencies = 2;
  }

  // Only present when state == SUCCESS.
  optional Output output = 4;

  message RunInfo {
    optional int64 created_usec = 1;
    optional int64 started_usec = 2;
    optional int64 finished_usec = 3;
    optional int32 pid = 4;
    optional int32 return_status = 5;
    // Not present if the Task has stdout_file set.
    optional string stdout = 6;
    optional string stderr = 7;
    optional double user_time = 8;
    optional double system_time = 9;

    // An error message giving more information about how the task failed.
    // Only present when state == ERROR.
    optional string error_details = 10;
  }

  // Present unless state is RUNNABLE.
  optional RunInfo run_info = 5;
}
