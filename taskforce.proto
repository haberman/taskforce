
package taskforce;

message Task {
  // Human-readable label for this task, must be unique within a TaskForce.
  optional string label = 1;

  // Dependencies of this task.
  //
  // These are file paths relative to the base of the tree, and they may not
  // contain "./" or "../".  However, they may start with "/".
  repeated string source = 2;

  // File that lists dynamically-computed dependencies of this task.
  // This task will depend on these files, but will also depend on
  // any files listed in these files.
  repeated string dynamic_source_file = 3;

  // Outputs of this task.
  //
  // These are file paths relative to the base of the tree, and they may not
  // contain "./" or "../", and may not start with "/" (all targets must be
  // within the tree).
  repeated string target = 4;

  // The command to be run and all arguments.  These will be passed directly to
  // exec() and will not be interpreted by any shell.
  //
  // The current directory will be the base of the tree.
  repeated string arg = 5;

  // Environment variables in VAR=val format.  The environment will be
  // completely cleared except for the variables listed here.
  repeated string env = 6;

  // The file where stdout will be written.  This is only required if you want
  // to refer to this file's stdout from another task.
  optional string stdout_file = 7;
}

message TaskForce {
  // Other TaskForce files that should be included as part of the build.
  repeated string sub_taskforce = 1;

  // Environment variables that apply to all Tasks in this TaskForce.
  repeated string base_env = 2;

  // Files that the TaskForce itself depends on; if these change, the
  // TaskForce should be regenerated.
  repeated string dependency = 3;

  // The tasks that are part of this build.
  repeated Task task = 4;
}

message Job {
  // Unique id for this job.  Hash of task id and source ids.
  optional string id = 1;

  enum State {
    RUNNABLE = 0;
    RUNNING = 1;
    SUCCESS = 2;
    ERROR = 3;
  }

  optional State state = 2;

  // Corresponding task id.
  optional string task_id = 3;

  // Ids of sources, array elements correspond to task.source.
  repeated string source_id = 4;

  // Ids of targets, array elements correspond to task.target.
  // Only present when state == SUCCESS.
  repeated string target_id = 5;

  // The time at which the job was created in state RUNNABLE.
  optional int64 created_usec = 6;

  // Present unless the state is RUNNABLE, the time at which the task started
  // running.
  optional int64 started_usec = 7;

  // Present only while the state is RUNNING.
  optional int32 pid = 8;

  // All of the following members are present when the state is SUCCESS or
  // ERROR.

  optional int64 finished_usec = 9;
  optional int32 return_status = 10;
  optional string stdout = 11;
  optional string stderr = 12;
  optional double user_time = 13;
  optional double system_time = 14;

  // This is present only when the state is ERROR.
  optional string error_details = 15;
}
